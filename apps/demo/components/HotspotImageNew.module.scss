// --- Color Variables (Map to Bootstrap 5 or define custom) ---
$color-blue-dark: var(--bs-dark);
$brand-white: var(--bs-white);
$color-sky-blue-dark: var(--bs-info);
$color-snow: var(--bs-light);
$color-ink-medium: var(--bs-secondary);
$color-stone: #707070; // A specific gray, define if no direct BS5 match
$color-sky-blue-light: #a0d4e3; // Lighter blue, define if needed
$color-transparent: transparent;

// --- General Layout ---
.hotspotImageContainer {
  padding-top: 1rem;
  padding-bottom: 1rem;
  // background-color: $color-snow; // If the whole container has a background
}

// .firstPart and .secondPart from original likely map to these columns
.imageColumn { // Corresponds to .firstPart or similar
  transition: width 0.5s ease-in-out, opacity 0.5s ease-in-out;
  padding: 0; // Assuming image/content might be edge-to-edge within the column

  &.imageColumnIntro {
    // Example: might be full width when intro is shown, then shrink
    // width: 100%;
  }
}

.sidebarColumn { // Corresponds to .secondPart or similar
  transition: width 0.5s ease-in-out, opacity 0.5s ease-in-out;
  background-color: $color-snow; // Sidebar background
  padding: 0; // Card inside will handle padding

  &.sidebarColumnIntro {
    // Example: might be hidden or different width
    // width: 0;
    // opacity: 0;
  }
}

// --- Image Styles ---
.imageWrapper { // Corresponds to .image-div
  width: 100%;
  position: relative; // Needed for absolute positioning of hotspots
  background-color: $color-stone; // Fallback if image fails to load or has transparency
  // Aspect ratio handling:
  // If a specific aspect ratio is required (e.g., 16:9)
  // &::before {
  //   content: "";
  //   display: block;
  //   padding-top: 56.25%; // (9 / 16 * 100%)
  // }
  // img {
  //   position: absolute;
  //   top: 0;
  //   left: 0;
  //   width: 100%;
  //   height: 100%;
  //   object-fit: cover;
  // }
}

.imageStyles { // Applied to the <Image> component
  display: block; // Remove extra space below image
  width: 100%;
  height: auto;
  // object-fit: cover; // If using aspect ratio above
}

// --- Sidebar Styles ---
.sidebarCard {
  border: none;
  border-radius: 0; // Remove rounded corners if it's flush with column edges
  height: 100%; // Make card fill the column height
  background-color: $color-transparent; // Sidebar column handles background color
}

.sidebarIntro {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  padding: 2rem 1.5rem;
  height: 100%; // Fill card height

  h2 { // sectionHeading.titleLine1
    font-size: 2rem; // Larger for main title
    font-weight: bold;
    color: $color-blue-dark;
  }
  h3 { // sectionHeading.titleLine2
    font-size: 1.5rem; // Slightly smaller
    font-weight: normal;
    color: $color-sky-blue-dark; // Accent color
    margin-top: 0.5rem;
  }
  .text-muted { // sectionHeading.subTitle (Bootstrap class)
    font-size: 1rem;
    margin-top: 1rem;
  }
  p { // sectionHeading.body
    margin-top: 1rem;
    font-size: 0.9rem;
  }
  .btn-primary { // sectionHeading.ctaPButton
    margin-top: 1.5rem;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
  }
  // sectionHeading.ctaPText styling if needed
}

.sidebarDetail {
  padding: 2rem 1.5rem; // Consistent padding
  height: 100%; // Fill card height
  overflow-y: auto; // Add scroll if content overflows

  h4 { // hotspot.infoHeader
    font-size: 1.75rem;
    font-weight: bold;
    color: $color-blue-dark;
    margin-bottom: 1rem;
  }
  p, ul { // hotspot.infoParagraph, hotspot.bulletPoints
    font-size: 0.9rem;
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  ul {
    padding-left: 1.5rem; // Indent list
    li {
      margin-bottom: 0.5rem;
    }
  }
  .btn-primary { // hotspot.ctaButtonText
    font-size: 0.9rem;
    svg { margin-left: 0.25rem; }
  }
  .btn-link { // hotspot.altCtaButtonText
    font-size: 0.9rem;
    padding-left: 0;
    padding-right: 0;
  }
  .btn-outline-secondary { // "Keep Exploring" button
    display: inline-flex;
    align-items: center;
    font-size: 0.9rem;
    svg { margin-right: 0.25rem; }
  }
}

// --- Animations ---
@keyframes slideInContentAnimation {
  from {
    opacity: 0;
    transform: translateX(30px); // Slightly increased slide
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.slideInContent {
  animation: slideInContentAnimation 0.5s ease-out forwards; // Match JS timeout
}

// --- Mobile / Accordion Styles ---
// These are for .de-accordion-* classes from original if Bootstrap defaults are not enough
.mobileIntro {
  padding: 1.5rem 1rem;
  text-align: center;
  background-color: $color-snow;
  border-bottom: 1px solid var(--bs-border-color);
  h4 { // sectionHeading.titleLine1 (simplified for mobile)
    font-size: 1.5rem;
    font-weight: bold;
  }
  p { // sectionHeading.subTitle (simplified for mobile)
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }
}

.mobileAccordion { // Applied to <Accordion>
  // .de-accordion-card equivalent
  .accordion-item {
    border: none;
    border-bottom: 1px solid var(--bs-border-color-translucent); // Subtle separator
    &:first-of-type {
      border-top: 1px solid var(--bs-border-color-translucent);
    }
  }
  // .de-accordion-card-header equivalent
  .accordion-header button {
    padding: 1rem 1.25rem;
    font-weight: 600; // Bold header text
    color: $color-blue-dark;
    background-color: $brand-white; // Clean background for header
    border: none; // Remove default border
    box-shadow: none; // Remove focus shadow if not desired

    &:not(.collapsed) {
      background-color: $color-sky-blue-light; // Light blue when open
      color: $color-blue-dark; // Or $brand-white if contrast is better
    }
    &::after { // Style Bootstrap's default chevron icon
      // filter: invert(1) grayscale(100%) brightness(200%); // Example to make it white
    }
  }
  // .de-accordion-card-body equivalent
  .accordion-body {
    padding: 1rem 1.25rem 1.5rem; // More bottom padding
    background-color: lighten($color-snow, 2%);
    h5 { // hotspot.infoHeader
      font-size: 1.25rem;
      font-weight: bold;
      margin-bottom: 0.75rem;
    }
    p, ul {
      font-size: 0.85rem;
      margin-bottom: 0.75rem;
    }
    .btn { // Scale down buttons slightly for mobile accordion
      font-size: 0.8rem;
    }
  }
}

// --- Utility / Helper classes ---
.hideDuringIntro {
  // If CSS transition for hiding is needed:
  // opacity: 1;
  // max-height: 1000px; // Needs a large enough max-height
  // transition: opacity 0.5s ease-in-out, max-height 0.5s ease-in-out;
  // &.hidden {
  //   opacity: 0;
  //   max-height: 0;
  //   overflow: hidden;
  // }
  // The TSX currently handles this by not rendering the component.
  // If a CSS transition is required, the TSX would need to toggle a 'hidden' class
  // instead of conditionally rendering. For now, assuming conditional rendering is fine.
}

// Styles for .content-on-image if any text/overlay was directly on the image
.contentOnImage {
  position: absolute;
  bottom: 20px; // Example
  left: 20px;  // Example
  background-color: rgba(0, 0, 0, 0.5); // Example semi-transparent overlay
  color: $brand-white;
  padding: 1rem;
  // Add other styling as needed
}

// Styles for .hotspot class itself, if it had specific global styles
// beyond what HotspotTooltipNew provides.
// .hotspot {
//   // Example: if all hotspots had a common border or size adjustment not in the component
// }
